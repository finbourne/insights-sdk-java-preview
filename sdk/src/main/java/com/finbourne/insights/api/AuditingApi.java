/*
 * FINBOURNE Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.289
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.insights.api;

import com.finbourne.insights.ApiCallback;
import com.finbourne.insights.ApiClient;
import com.finbourne.insights.ApiException;
import com.finbourne.insights.ApiResponse;
import com.finbourne.insights.Configuration;
import com.finbourne.insights.Pair;
import com.finbourne.insights.ProgressRequestBody;
import com.finbourne.insights.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.insights.model.AuditEntry;
import com.finbourne.insights.model.CreateAuditEntry;
import com.finbourne.insights.model.LusidProblemDetails;
import com.finbourne.insights.model.LusidValidationProblemDetails;
import com.finbourne.insights.model.ProblemDetails;
import com.finbourne.insights.model.ResourceListOfAuditProcessSummary;
import com.finbourne.insights.model.ScrollableCollectionOfAuditEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditingApi {
    private ApiClient localVarApiClient;
    public AuditingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createEntry
     * @param createAuditEntry Information about the entry to be created. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEntryCall(CreateAuditEntry createAuditEntry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createAuditEntry;

        // create path and map variables
        String localVarPath = "/api/auditing/entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.289");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntryValidateBeforeCall(CreateAuditEntry createAuditEntry, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createEntryCall(createAuditEntry, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] CreateEntry: Create (persist) and audit entry..
     * 
     * @param createAuditEntry Information about the entry to be created. (optional)
     * @return AuditEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public AuditEntry createEntry(CreateAuditEntry createAuditEntry) throws ApiException {
        ApiResponse<AuditEntry> localVarResp = createEntryWithHttpInfo(createAuditEntry);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] CreateEntry: Create (persist) and audit entry..
     * 
     * @param createAuditEntry Information about the entry to be created. (optional)
     * @return ApiResponse&lt;AuditEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditEntry> createEntryWithHttpInfo(CreateAuditEntry createAuditEntry) throws ApiException {
        okhttp3.Call localVarCall = createEntryValidateBeforeCall(createAuditEntry, null);
        Type localVarReturnType = new TypeToken<AuditEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] CreateEntry: Create (persist) and audit entry.. (asynchronously)
     * 
     * @param createAuditEntry Information about the entry to be created. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> There have been too many recent requests, retry later (using the RETRY-AFTER header value as the delay). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEntryAsync(CreateAuditEntry createAuditEntry, final ApiCallback<AuditEntry> _callback) throws ApiException {
        okhttp3.Call localVarCall = createEntryValidateBeforeCall(createAuditEntry, _callback);
        Type localVarReturnType = new TypeToken<AuditEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProcesses
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auditing/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.289");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getProcessesCall(_callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] GetProcesses: Get the latest audit entry for each process.
     * This will never be {null}, though it may be empty.
     * @return ResourceListOfAuditProcessSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfAuditProcessSummary getProcesses() throws ApiException {
        ApiResponse<ResourceListOfAuditProcessSummary> localVarResp = getProcessesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] GetProcesses: Get the latest audit entry for each process.
     * This will never be {null}, though it may be empty.
     * @return ApiResponse&lt;ResourceListOfAuditProcessSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfAuditProcessSummary> getProcessesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProcessesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResourceListOfAuditProcessSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] GetProcesses: Get the latest audit entry for each process. (asynchronously)
     * This will never be {null}, though it may be empty.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessesAsync(final ApiCallback<ResourceListOfAuditProcessSummary> _callback) throws ApiException {
        okhttp3.Call localVarCall = getProcessesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResourceListOfAuditProcessSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEntries
     * @param filter The filter to be applied to the results. (optional)
     * @param sortBy The order to return the entries in. (optional)
     * @param size The maximum number of entries to return. (optional, default to 1000)
     * @param state The scrolling state, used to iterate through the data set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEntriesCall(String filter, String sortBy, Integer size, String state, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auditing/entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.289");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEntriesValidateBeforeCall(String filter, String sortBy, Integer size, String state, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listEntriesCall(filter, sortBy, size, state, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] ListEntries: Get the audit entries.
     * This will never be {null}, though it may be empty.
     * @param filter The filter to be applied to the results. (optional)
     * @param sortBy The order to return the entries in. (optional)
     * @param size The maximum number of entries to return. (optional, default to 1000)
     * @param state The scrolling state, used to iterate through the data set. (optional)
     * @return ScrollableCollectionOfAuditEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ScrollableCollectionOfAuditEntry listEntries(String filter, String sortBy, Integer size, String state) throws ApiException {
        ApiResponse<ScrollableCollectionOfAuditEntry> localVarResp = listEntriesWithHttpInfo(filter, sortBy, size, state);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] ListEntries: Get the audit entries.
     * This will never be {null}, though it may be empty.
     * @param filter The filter to be applied to the results. (optional)
     * @param sortBy The order to return the entries in. (optional)
     * @param size The maximum number of entries to return. (optional, default to 1000)
     * @param state The scrolling state, used to iterate through the data set. (optional)
     * @return ApiResponse&lt;ScrollableCollectionOfAuditEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScrollableCollectionOfAuditEntry> listEntriesWithHttpInfo(String filter, String sortBy, Integer size, String state) throws ApiException {
        okhttp3.Call localVarCall = listEntriesValidateBeforeCall(filter, sortBy, size, state, null);
        Type localVarReturnType = new TypeToken<ScrollableCollectionOfAuditEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] ListEntries: Get the audit entries. (asynchronously)
     * This will never be {null}, though it may be empty.
     * @param filter The filter to be applied to the results. (optional)
     * @param sortBy The order to return the entries in. (optional)
     * @param size The maximum number of entries to return. (optional, default to 1000)
     * @param state The scrolling state, used to iterate through the data set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEntriesAsync(String filter, String sortBy, Integer size, String state, final ApiCallback<ScrollableCollectionOfAuditEntry> _callback) throws ApiException {
        okhttp3.Call localVarCall = listEntriesValidateBeforeCall(filter, sortBy, size, state, _callback);
        Type localVarReturnType = new TypeToken<ScrollableCollectionOfAuditEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
